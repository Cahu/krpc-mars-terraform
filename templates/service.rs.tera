{% import "macros" as macros %}
use krpc;
use codec;
use super::*;

{% for name, def in service_definition.classes %}
struct {{ name }} (u32);

impl AsRef<u32> for {{ name }} {
    fn as_ref(&self) -> &u32 {
        &self.0
    }
}
{% endfor %}

{% for name, def in service_definition.enumerations %}
enum {{ name }} {
{%- for val_def in def.values %}
    {{ val_def.name }} = {{ val_def.value }},
{%- endfor %}
}

impl TryFrom<u32> for {{ name }} {
    type Error = String;
    #[inline]
    fn try_from(source: u32) -> Result<{{ name }}, EnumFromUIntError> {
        match source {
        {%- for val_def in def.values %}
            {{ val_def.value }} => Ok({{ name }}::{{ val_def.name }}),
        {%- endfor %}
            _ => Err(format!("Could not convert '{}' to a {{ service_name }}::{{ name }}", source)),
        }
    }
}
{%- endfor %}


{% for proc_name, proc_def in service_definition.procedures %}
    {%- if proc_def.return_type is defined %}
        {%- set return_type = type_for(type=proc_def.return_type) %}
pub fn {{ proc_name | lower }}(client: &mut RPCClient) -> {{ return_type }} {
    {%- else %}
pub fn {{ proc_name | lower }}(client: &mut RPCClient) {
    {%- endif %}
}

{% endfor %}
}

{{ __tera_context }}
