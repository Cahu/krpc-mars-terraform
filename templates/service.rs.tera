use krpc_mars::krpc as krpc;
use krpc_mars::codec as codec;
use krpc_mars::protobuf as protobuf;
use krpc_mars::RPCClient;
use krpc_mars::rpcfailure::RPCFailure;
use krpc_mars::codec::RPCEncodable;
use krpc_mars::codec::RPCExtractable;

{% for include in includes %}
use {{ include }};
{%- endfor %}

use std::fmt;


#[derive(Clone)]
pub struct {{ service_name }} {
    client: RPCClient,
}

impl {{ service_name }} {
    pub fn new(client: RPCClient) -> Self {
        {{ service_name }} { client }
    }
}

{% for name, def in classes %}
#[derive(Clone)]
pub struct {{ name }} {
    id:     u32,
    client: RPCClient,
}

impl fmt::Debug for {{ name }} {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{{ name }}({})", self.id)
    }
}

impl RPCEncodable for {{ name }} {
    fn encode(&self, output: &mut protobuf::CodedOutputStream) -> Result<(), protobuf::ProtobufError> {
        self.id.encode(output)
    }
}

impl RPCExtractable for {{ name }} {
	fn extract_value(client: &RPCClient, input: &mut protobuf::CodedInputStream) -> Result<Self, protobuf::ProtobufError> {
		let id = RPCExtractable::extract_value(client, input)?;
        Ok({{ name }} { id, client: client.clone() })
	}
}

{% endfor %}

{% for name, def in enumerations %}
#[derive(Debug, Copy, Clone)]
pub enum {{ name }} {
{%- for val_def in def.values %}
    {{ val_def.name }} = {{ val_def.value }},
{%- endfor %}
}

impl From<i32> for {{ name }} {
    #[inline]
    fn from(source: i32) -> Self {
        match source {
        {%- for val_def in def.values %}
            {{ val_def.value }} => {{ name }}::{{ val_def.name }},
        {%- endfor %}
            _ => panic!("Could not convert '{}' to a {{ service_name }}::{{ name }}", source),
        }
    }
}

impl RPCEncodable for {{ name }} {
    fn encode(&self, output: &mut protobuf::CodedOutputStream) -> Result<(), protobuf::ProtobufError> {
        (*self as i32).encode(output)
    }
}

impl RPCExtractable for {{ name }} {
    fn extract_value(client: &RPCClient, input: &mut protobuf::CodedInputStream) -> Result<Self, protobuf::ProtobufError> {
        let value : i32 = RPCExtractable::extract_value(client, input)?;
        Ok({{ name }}::from(value))
    }
}
{% endfor %}

{% for proc in procedures %}
    {%- if proc.object is defined %}
impl {{ proc.object }} {
    {%- else %}
impl {{ service_name }} {
    {%- endif %}
    /// {{ proc.doc }}
    pub fn {{ proc.name }}(&self
    {%- for param in proc.params -%}
        , p_{{ param.name }}: {{ param.type }}
    {%- endfor -%}
    {%- if proc.return is defined -%}
    ) -> Result<{{ proc.return.type }}, RPCFailure> {
    {%- else -%}
    ) -> Result<(), RPCFailure> {
    {%- endif %}
        let mut proc_call = krpc::ProcedureCall::new();
        proc_call.set_service(String::from("{{ service_name }}"));
        proc_call.set_procedure(String::from("{{ proc.rpc_name }}"));

        {%- set_global arg_pos = 0 %}
        {%- if proc.object is defined or proc.params | length > 0 %}

        let mut arguments = protobuf::RepeatedField::<krpc::Argument>::new();
            {%- if proc.object is defined %}
                {%- set_global arg_pos = arg_pos + 1 %}

        let mut arg0 = krpc::Argument::new();
        arg0.set_position(0);
        arg0.set_value(self.encode_to_bytes().unwrap());
        arguments.push(arg0);
            {%- endif %}

            {%- for param in proc.params %}

        let mut arg{{ loop.index }} = krpc::Argument::new();
        arg{{ loop.index }}.set_position({{ arg_pos }});
        arg{{ loop.index }}.set_value(p_{{ param.name }}.encode_to_bytes().unwrap());
        arguments.push(arg{{ loop.index }});
                {%- set_global arg_pos = arg_pos + 1 %}
            {%- endfor %}

        proc_call.set_arguments(arguments);
        {%- endif %}

        let response = self.client.make_proc_call(proc_call)?;
    {%- if proc.return.is_nullable %}
        if response.results.len() == 0 {
            return Ok(None);
        }
    {%- endif %}

        codec::extract_single_result(&self.client, &response)
    }
}
{% endfor %}
